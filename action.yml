name: "Code of Conduct Notifier"
description: "Hello"

inputs:
  coc-url:
    description: The URL to the Code of Conduct. Used to mention in the body of the comment
    default: "CODE_OF_CONDUCT.md"
  comment-body:
    description: The comment that the bot will post about the Code of Conduct
    default: "Please refer to our current Code of Conduct: <URL>"

runs:
  using: "composite"
  steps:
#     - name: Build the CoC URL
#       shell: bash
#       run: |
#         regex="https?://[^ ]+"
        
#         if [[ "${{ inputs.coc-url }}" =~ $regex ]]
#         then 
#             export COCURL="${{ inputs.coc-url }}"
#         else
#             if [[ "${{ inputs.coc-url }}" = "/*"* ]]
#             then
#                 export COCURL="https://github.com/${{ github.repository }}/blob/main${{ inputs.coc-url }}"
#             else
#                 export COCURL="https://github.com/${{ github.repository }}/blob/main/${{ inputs.coc-url }}"
#             fi
#         fi
        
#         echo $COCURL
#     - name: Build the body message
#       shell: bash
#       run: |
#         ecgo "$COCURL"
        
#         comment="${{ inputs.comment-body }}"
#         export BODY=$(sed 's/<URL>/'$COCURL'/g' <<<"${{ inputs.comment-body }}")
        
#         echo $BODY
    - uses: actions/github-script@v5
      if: contains(github.event.comment.body, 'code of conduct') 
      env:
        COMMENT: ${{ inputs.comment-body }}
        URL: ${{ inputs.coc-url }}
      with:
        script: |
          const { COMMENT, URL } = process.env
          
          // Function to build the URL that is included in the body
          function buildUrl(urlInput) {
            const regex = new RegExp('https?://[^ ]+');
            
            // If it is an absolute URL, return it as it is
            if (regex.test(urlInput)) {
              return urlInput;
            } else {
              // If not, build the URL relative to the context repo
              return `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main${urlInput.startsWith('/') ? "" : "/"}${urlInput}`;
            }
          }
          
          function buildBody(comment, url){
            return comment.replace('<URL>', url);
          }
          
          const cocUrl = buildUrl(URL);
          console.log(cocUrl);

          const body = buildBody(COMMENT, cocUrl);
          console.log(body);
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
